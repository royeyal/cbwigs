function z(){console.log("🚨🚨🚨 TEXT REVEAL FUNCTION CALLED 🚨🚨🚨"),console.log("🎯 initMaskTextScrollReveal: Starting initialization..."),console.log("🔤 Checking font loading status...");function d(){if(console.log("✅ Fonts loaded, proceeding with text reveal initialization..."),typeof gsap>"u"){console.error("❌ GSAP is required for text reveal functionality. Please include GSAP in your project.");return}if(console.log("✅ GSAP found:",typeof gsap,gsap.version||"version unknown"),typeof SplitText>"u"){console.error("❌ GSAP SplitText plugin is required for text reveal functionality. Please include SplitText plugin.");return}if(console.log("✅ SplitText plugin found:",typeof SplitText),typeof ScrollTrigger>"u"){console.error("❌ GSAP ScrollTrigger plugin is required for text reveal functionality. Please include ScrollTrigger plugin.");return}console.log("✅ ScrollTrigger plugin found:",typeof ScrollTrigger);try{gsap.registerPlugin(SplitText,ScrollTrigger),console.log("✅ GSAP plugins registered successfully")}catch{console.error("❌ Failed to register GSAP plugins");return}const r=document.querySelectorAll('[data-split="heading"]');if(console.log('🔍 Found headings with data-split="heading":',r.length),!r.length){console.log("ℹ️ No text reveal elements found - this is normal, exiting gracefully");return}r.forEach((i,a)=>{var t,c;if(console.log(`📝 Processing heading ${a+1}/${r.length}:`,i),console.log("  - Text content:",i.textContent.trim()),console.log("  - Element type:",i.tagName),!i.textContent.trim()){console.warn("⚠️ Heading has no text content, skipping:",i);return}try{console.log("✂️ Creating SplitText instance...");const l=new SplitText(i,{type:"lines,words",linesClass:"line",wordsClass:"word",onSplit(s){var m,u,o;if(console.log("🚨🚨🚨 ONSPLIT CALLBACK TRIGGERED 🚨🚨🚨"),console.log("🎭 SplitText onSplit callback triggered"),console.log("  - Self object:",s),console.log("  - Original element:",s.original),console.log("  - Original element type:",typeof s.original),console.log("  - Original element tagName:",(m=s.original)==null?void 0:m.tagName),console.log("  - Lines created:",((u=s.lines)==null?void 0:u.length)||0),console.log("  - Words created:",((o=s.words)==null?void 0:o.length)||0),!s.original){console.error("❌ SplitText original element is undefined!"),console.error("❌ THIS IS THE PROBLEM - self.original is:",s.original);return}if(!document.contains(s.original)){console.error("❌ SplitText original element is not in the DOM!");return}console.log("✅ About to call gsap.set() on:",s.original),console.log("✅ Element is valid, proceeding with gsap.set...");try{console.log("🔧 Attempting gsap.set with self.original..."),gsap.set(s.original,{visibility:"visible"}),console.log("✅ Visibility set successfully")}catch(n){console.error("❌ Failed to set visibility with self.original:",n),console.error("❌ Error details:",n.message,n.stack)}}});console.log("✅ SplitText created successfully:",l),console.log("  - Lines:",((t=l.lines)==null?void 0:t.length)||0),console.log("  - Words:",((c=l.words)==null?void 0:c.length)||0),l.lines&&l.lines.length>0?(i.classList.add("split-ready"),console.log("✅ Added split-ready class to heading")):console.warn("⚠️ No lines created by SplitText, not adding split-ready class"),l.words&&l.words.length>0&&(console.log("🎬 Setting up scroll animation..."),gsap.set(l.words,{yPercent:100,opacity:0}),ScrollTrigger.create({trigger:i,start:"top 80%",onEnter:()=>{console.log("🎯 ScrollTrigger activated for heading:",i),gsap.to(l.words,{yPercent:0,opacity:1,duration:.8,stagger:.08,ease:"power2.out"})}}),console.log("✅ Scroll animation setup complete"))}catch(l){console.error("❌ Error processing heading:",l),console.error("  - Heading element:",i)}}),console.log("✅ Text reveal initialization complete")}document.fonts&&document.fonts.ready?(console.log("🔤 Using document.fonts.ready API..."),document.fonts.ready.then(()=>{console.log("✅ Fonts loaded via document.fonts.ready"),d()}).catch(r=>{console.warn("⚠️ Font loading detection failed, proceeding anyway:",r),d()})):(console.log("🔤 document.fonts not supported, using load event fallback..."),document.readyState==="complete"?(console.log("✅ Document already complete, initializing immediately"),d()):window.addEventListener("load",()=>{console.log("✅ Window load event fired, initializing text reveal"),d()}))}function W(){if(typeof gsap>"u"){console.error("GSAP is required for content reveal scroll animations. Please include GSAP in your project.");return}if(typeof ScrollTrigger>"u"){console.error("GSAP ScrollTrigger plugin is required for content reveal scroll animations. Please include ScrollTrigger plugin.");return}try{gsap.registerPlugin(ScrollTrigger)}catch(i){console.error("Failed to register GSAP ScrollTrigger plugin:",i);return}const d=window.matchMedia("(prefers-reduced-motion: reduce)").matches,r=gsap.context(()=>{document.querySelectorAll("[data-reveal-group]").forEach(i=>{const a=(parseFloat(i.getAttribute("data-stagger"))||100)/1e3,t=i.getAttribute("data-distance")||"2em",c=i.getAttribute("data-start")||"top 80%",l=.8,s="power4.inOut";if(d){gsap.set(i,{clearProps:"all",y:0,autoAlpha:1});return}const m=Array.from(i.children).filter(o=>o.nodeType===1);if(!m.length){gsap.set(i,{y:t,autoAlpha:0}),ScrollTrigger.create({trigger:i,start:c,once:!0,onEnter:()=>gsap.to(i,{y:0,autoAlpha:1,duration:l,ease:s,onComplete:()=>gsap.set(i,{clearProps:"all"})})});return}const u=[];m.forEach(o=>{const n=o.matches("[data-reveal-group-nested]")?o:o.querySelector(":scope [data-reveal-group-nested]");if(n){const p=o.getAttribute("data-ignore")==="false"||n.getAttribute("data-ignore")==="false";u.push({type:"nested",parentEl:o,nestedEl:n,includeParent:p})}else u.push({type:"item",el:o})}),u.forEach(o=>{if(o.type==="item"){const p=o.el.matches("[data-reveal-group-nested]")?t:o.el.getAttribute("data-distance")||t;gsap.set(o.el,{y:p,autoAlpha:0})}else{o.includeParent&&gsap.set(o.parentEl,{y:t,autoAlpha:0});const n=o.nestedEl.getAttribute("data-distance")||t;Array.from(o.nestedEl.children).forEach(p=>gsap.set(p,{y:n,autoAlpha:0}))}}),u.forEach(o=>{o.type==="nested"&&o.includeParent&&gsap.set(o.parentEl,{y:t})}),ScrollTrigger.create({trigger:i,start:c,once:!0,onEnter:()=>{const o=gsap.timeline();u.forEach((n,p)=>{const A=p*a;if(n.type==="item")o.to(n.el,{y:0,autoAlpha:1,duration:l,ease:s,onComplete:()=>gsap.set(n.el,{clearProps:"all"})},A);else{n.includeParent&&o.to(n.parentEl,{y:0,autoAlpha:1,duration:l,ease:s,onComplete:()=>gsap.set(n.parentEl,{clearProps:"all"})},A);const S=parseFloat(n.nestedEl.getAttribute("data-stagger")),G=isNaN(S)?a:S/1e3;Array.from(n.nestedEl.children).forEach((T,E)=>{o.to(T,{y:0,autoAlpha:1,duration:l,ease:s,onComplete:()=>gsap.set(T,{clearProps:"all"})},A+E*G)})}})}})})});return()=>r.revert()}function M(){if(console.log("🎯 initBasicGSAPSlider: Starting initialization..."),typeof gsap>"u"){console.error("❌ GSAP is required for slider functionality. Please include GSAP in your project.");return}if(console.log("✅ GSAP found:",typeof gsap,gsap.version||"version unknown"),typeof Draggable>"u"){console.error("❌ GSAP Draggable plugin is required for slider functionality. Please include Draggable plugin.");return}console.log("✅ Draggable plugin found:",typeof Draggable);try{gsap.registerPlugin(Draggable),console.log("✅ Draggable plugin registered successfully")}catch(r){console.error("❌ Failed to register GSAP Draggable plugin:",r);return}const d=document.querySelectorAll("[data-gsap-slider-init]");if(console.log("🔍 Found slider elements:",d.length),d.length===0){console.log("ℹ️ No sliders found on page - this is normal, exiting gracefully");return}d.forEach((r,i)=>{console.log(`🎠 Initializing slider ${i+1}/${d.length}:`,r),r._sliderDraggable&&(console.log("🧹 Cleaning up existing slider instance"),r._sliderDraggable.kill());const a=r.querySelector("[data-gsap-slider-collection]"),t=r.querySelector("[data-gsap-slider-list]"),c=Array.from(r.querySelectorAll("[data-gsap-slider-item]")),l=Array.from(r.querySelectorAll("[data-gsap-slider-control]"));if(console.log("📋 Slider elements found:"),console.log("  - Collection:",a),console.log("  - Track:",t),console.log("  - Items:",c.length,c),console.log("  - Controls:",l.length,l),!a){console.error("❌ Missing required element: [data-gsap-slider-collection]");return}if(!t){console.error("❌ Missing required element: [data-gsap-slider-list]");return}if(c.length===0){console.error("❌ No slider items found: [data-gsap-slider-item]");return}console.log("♿ Setting up accessibility attributes..."),r.setAttribute("role","region"),r.setAttribute("aria-roledescription","carousel"),r.setAttribute("aria-label","Slider"),a.setAttribute("role","group"),a.setAttribute("aria-roledescription","Slides List"),a.setAttribute("aria-label","Slides"),c.forEach((e,h)=>{e.setAttribute("role","group"),e.setAttribute("aria-roledescription","Slide"),e.setAttribute("aria-label",`Slide ${h+1} of ${c.length}`),e.setAttribute("aria-hidden","true"),e.setAttribute("aria-selected","false"),e.setAttribute("tabindex","-1")}),l.forEach(e=>{const h=e.getAttribute("data-gsap-slider-control");e.setAttribute("role","button"),e.setAttribute("aria-label",h==="prev"?"Previous Slide":"Next Slide"),e.disabled=!0,e.setAttribute("aria-disabled","true")}),console.log("📏 Computing slider dimensions...");const s=getComputedStyle(r),m=s.getPropertyValue("--slider-status").trim();let u=parseFloat(s.getPropertyValue("--slider-spv"));const o=c[0].getBoundingClientRect(),n=parseFloat(getComputedStyle(c[0]).marginRight),p=o.width+n;isNaN(u)&&(u=a.clientWidth/p);const A=Math.max(1,Math.min(u,c.length)),S=m==="on"&&A<c.length;if(console.log("📊 Slider calculations:"),console.log("  - Status var (--slider-status):",m),console.log("  - SPV var (--slider-spv):",u),console.log("  - First item rect:",o),console.log("  - Margin right:",n),console.log("  - Slide width:",p),console.log("  - Collection width:",a.clientWidth),console.log("  - Calculated SPV:",A),console.log("  - Items length:",c.length),console.log("  - Slider enabled:",S),r.setAttribute("data-gsap-slider-status",S?"active":"not-active"),!S){console.log("⏹️ Slider disabled - tearing down..."),t.removeAttribute("style"),t.onmouseenter=null,t.onmouseleave=null,t.removeAttribute("data-gsap-slider-list-status"),r.removeAttribute("role"),r.removeAttribute("aria-roledescription"),r.removeAttribute("aria-label"),a.removeAttribute("role"),a.removeAttribute("aria-roledescription"),a.removeAttribute("aria-label"),c.forEach(e=>{e.removeAttribute("role"),e.removeAttribute("aria-roledescription"),e.removeAttribute("aria-label"),e.removeAttribute("aria-hidden"),e.removeAttribute("aria-selected"),e.removeAttribute("tabindex"),e.removeAttribute("data-gsap-slider-item-status")}),l.forEach(e=>{e.disabled=!1,e.removeAttribute("role"),e.removeAttribute("aria-label"),e.removeAttribute("aria-disabled"),e.removeAttribute("data-gsap-slider-control-status")});return}t.onmouseenter=()=>{t.setAttribute("data-gsap-slider-list-status","grab")},t.onmouseleave=()=>{t.removeAttribute("data-gsap-slider-list-status")};const G=a.clientWidth,T=t.scrollWidth,E=Math.max(T-G,0),x=-E,P=0,R=E/p,N=Math.floor(R),f=[];for(let e=0;e<=N;e++)f.push(-e*p);N<R&&f.push(-R*p);let b=0;const w=gsap.quickSetter(t,"x","px");let q=a.getBoundingClientRect();function y(e){if(e>P||e<x)return;const h=e>P?P:e<x?x:e;let C=f[0];f.forEach(g=>{Math.abs(g-h)<Math.abs(C-h)&&(C=g)}),b=f.indexOf(C),c.forEach((g,D)=>{const v=g.getBoundingClientRect(),F=v.left-q.left+v.width/2,L=F>0&&F<q.width,k=D===b?"active":L?"inview":"not-active";g.setAttribute("data-gsap-slider-item-status",k),g.setAttribute("aria-selected",D===b?"true":"false"),g.setAttribute("aria-hidden",L?"false":"true"),g.setAttribute("tabindex",D===b?"0":"-1")}),l.forEach(g=>{const v=g.getAttribute("data-gsap-slider-control")==="prev"?b>0:b<f.length-1;g.disabled=!v,g.setAttribute("aria-disabled",v?"false":"true"),g.setAttribute("data-gsap-slider-control-status",v?"active":"not-active")})}l.forEach(e=>{const h=e.getAttribute("data-gsap-slider-control");e.addEventListener("click",()=>{if(e.disabled)return;const g=b+(h==="next"?1:-1);gsap.to(t,{duration:.4,x:f[g],onUpdate:()=>y(gsap.getProperty(t,"x"))})})}),console.log("🎮 Creating Draggable instance..."),console.log("  - Track element:",t),console.log("  - Bounds:",{minX:x,maxX:P}),console.log("  - Snap points:",f);try{r._sliderDraggable=Draggable.create(t,{type:"x",inertia:!0,bounds:{minX:x,maxX:P},throwResistance:2e3,dragResistance:.05,maxDuration:.6,minDuration:.2,edgeResistance:.75,snap:{x:f,duration:.4},onPress(){t.setAttribute("data-gsap-slider-list-status","grabbing"),q=a.getBoundingClientRect()},onDrag(){w(this.x),y(this.x)},onThrowUpdate(){w(this.x),y(this.x)},onThrowComplete(){w(this.endX),y(this.endX),t.setAttribute("data-gsap-slider-list-status","grab")},onRelease(){w(this.x),y(this.x),t.setAttribute("data-gsap-slider-list-status","grab")}})[0],console.log("✅ Draggable instance created successfully:",r._sliderDraggable)}catch(e){console.error("❌ Failed to create Draggable instance:",e);return}console.log("🎬 Setting initial slider state..."),w(0),y(0),console.log("✅ Slider initialization complete!")})}function I(d,r){let i=innerWidth,a;return function(...t){clearTimeout(a),a=setTimeout(()=>{innerWidth!==i&&(console.log("📏 Window resized, reinitializing sliders..."),i=innerWidth,d.apply(this,t))},r)}}typeof window<"u"&&(console.log("🔄 Setting up window resize handler for sliders..."),window.addEventListener("resize",I(M,200)));document.addEventListener("DOMContentLoaded",()=>{z(),W(),M()});
